"start": "C:/ProgramData/chocolatey/lib/electron/tools/electron.exe ." for windows
"start": "electron ." for everithing else
test
setting your private git repo easily https://git-scm.com/book/en/v2/Git-on-the-Server-Setting-Up-the-Server
adding hot reload to react-typescript-electron forge https://github.com/electron-userland/electron-forge/issues/1390

an amaising react write off:
https://blog.logrocket.com/electron-forge-vs-electron-react-boilerplate/

creating reac-forge project:
yarn create electron-app my-new-app --template=typescript-webpack
yarn add react react-dom
yarn add @types/react @types/react-dom --dev

sudo prompt:
https://www.npmjs.com/package/sudo-prompt

comprehensive rewiev of child_process:
https://www.freecodecamp.org/news/node-js-child-processes-everything-you-need-to-know-e69498fe970a/

init installation:
    Windows:
    1. choco
    2. git 
    3. vscode
    4. python
    5. optianally python libs(Pygame, telegram, discord, tkinter)
    7. vscode extention for python

    linux:
    2. git 
    3. vscode
    4. python
    5. optianally python libs(Pygame, telegram, discord, tkinter)
    7. vscode extention for python


So for first stage of development I need:
1. Make package installation for python work
2. Make task and git changes editors
3. Make git work
4. Make init API


For the second stage:
1. Add package installation
2. Add code excecution with API


remote API:
1. Fast API for implemetation
2. get login/password
3. Returns user configs.
